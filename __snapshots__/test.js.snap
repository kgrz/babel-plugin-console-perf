// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`caters to the case of multiple returns 1`] = `
"
const a = () => {
	console.profile(\\"a\\");

	// profile
	if (true) {
		let _babel_temp_alias = Math.random(12);

		console.profileEnd();

		return _babel_temp_alias;
	}

	_babel_temp_alias = Math.sqrt(10000000000000000000);
	console.profileEnd();
	return _babel_temp_alias;
};"
`;

exports[`does not add profile statement if one is already present 1`] = `
"
const b = () => {
	console.profile('b');

	// profile

	console.profile('some name');
	console.profileEnd();
	return 42;
	console.profileEnd();
};"
`;

exports[`has multiple comments 1`] = `
"
const b = () => {
	console.profile(\\"b\\");
	console.profileEnd();

	// profile
	// profile
	// profile
	// profile
	// profile

	return 42;
};"
`;

exports[`has multiple comments 2`] = `
"
const b = () => {
	console.profile(\\"b\\");
	console.profileEnd();

	// profile
	//
	// profile
	//
	return 42;
	// profile
	//
	// profile
};"
`;

exports[`has multiple returns, one of them invalid 1`] = `
"
const b = () => {
	console.profile(\\"b\\");
	console.profileEnd();

	// profile

	return 42;
	console.profileEnd();
	return 42;
	console.profileEnd();
	return 42;
};"
`;

exports[`maintains indentation when for if blocks 1`] = `
"
const b = () => {
	console.profile('b');

	// profile

	if (true) {
		console.profileEnd();

		return 12;
	}

	switch (true) {
		case 'case1':
			console.profileEnd();

			return 'what';
		case 'case 2':
			{
				console.profileEnd();

				return 'where';
			}
		case 'case 3':
			console.profileEnd();

			return 'who';
		default:
			console.profileEnd();

			return 'default';
	}

	console.profileEnd();
	return 42;
};"
`;

exports[`maintains indentation when used with iterators 1`] = `
"
const b = () => {
	console.profile(\\"b\\");

	[1, 3, 5].map(item => {
		return item;
	});

	// profile
	console.profileEnd();
	return 42;
};"
`;

exports[`maintains indentation with nested functions 1`] = `
"
const b = () => {
	console.profile(\\"b\\");

	const a = () => {
		return Math.sqrt(1000000000000);
	};

	// profile
	console.profileEnd();
	return 42;
};"
`;

exports[`maintains indentation with nested functions 2`] = `
"
const b = () => {
	console.profile(\\"b\\");

	const a = () => {
		console.profile(\\"a\\");

		let _babel_temp_alias = Math.sqrt(1000000000000);

		console.profileEnd();

		// profile
		return _babel_temp_alias;
	};

	// profile

	let _babel_temp_alias = a();

	console.profileEnd();
	return _babel_temp_alias;
};"
`;

exports[`usage inside classes works inside function properties 1`] = `
"
class A {
	changeVisualState(id) {
		console.profile(\\"changeVisualState\\");

		let _babel_temp_alias = item => {
			this.setState({
				newState: {}
			});
			callSomeMethod();
			console.profileEnd();
		};

		console.profileEnd();

		// profile
		return _babel_temp_alias;
	}
}"
`;

exports[`wraps a function in profile block 1`] = `
"
const b = () => {
	console.profile(\\"b\\");
	console.profileEnd();

	// profile
	return 42;
};

const a = () => {
	console.profile(\\"a\\");

	let _babel_temp_alias = b();

	console.profileEnd();

	// profile
	return _babel_temp_alias;
};"
`;
